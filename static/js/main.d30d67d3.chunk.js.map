{"version":3,"sources":["sidewalks.js","sidewalkstyles.js","OpenLayersMap.js","Mappage.js","App.js","About.js","serviceWorker.js","index.js"],"names":["sidewalks","green","Style","fill","Fill","color","stroke","Stroke","width","red","blue","lineDash","sidewalkStyles","feature","get","vectorLayer","VectorLayer","source","VectorSource","features","GeoJSON","readFeatures","style","OpenLayersMap","id","Map","target","layers","TileLayer","OSM","view","View","projection","center","zoom","React","Component","Mappage","className","to","App","About","Boolean","window","location","hostname","match","ReactDOM","render","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d30d67d3.chunk.js","sourcesContent":["var sidewalks = {\r\n  \"type\": \"FeatureCollection\",\r\n  \"features\": [\r\n    {\r\n      \"type\": \"Feature\",\r\n      \"properties\": {\r\n        \"color\": 1\r\n      },\r\n      \"geometry\": {\r\n        \"type\": \"LineString\",\r\n        \"coordinates\": [\r\n          [\r\n            -35.74178695678711,\r\n            -9.659223189636899\r\n          ],\r\n          [\r\n            -35.74406147003174,\r\n            -9.65998471367844\r\n          ],\r\n          [\r\n            -35.74479103088379,\r\n            -9.662396195110178\r\n          ],\r\n          [\r\n            -35.74371814727783,\r\n            -9.664342290332675\r\n          ],\r\n          [\r\n            -35.74127197265625,\r\n            -9.664384596625549\r\n          ],\r\n          [\r\n            -35.740156173706055,\r\n            -9.661888516244654\r\n          ],\r\n          [\r\n            -35.74075698852539,\r\n            -9.659646258761542\r\n          ],\r\n          [\r\n            -35.742130279541016,\r\n            -9.659011654875195\r\n          ]\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"Feature\",\r\n      \"properties\": {\r\n        \"color\": 2\r\n      },\r\n      \"geometry\": {\r\n        \"type\": \"LineString\",\r\n        \"coordinates\": [\r\n          [\r\n            -35.737667083740234,\r\n            -9.659730872522683\r\n          ],\r\n          [\r\n            -35.737624168395996,\r\n            -9.664342290332675\r\n          ],\r\n          [\r\n            -35.73384761810303,\r\n            -9.664342290332675\r\n          ]\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      \"type\": \"Feature\",\r\n      \"properties\": {\r\n        \"color\": 3\r\n      },\r\n      \"geometry\": {\r\n        \"type\": \"LineString\",\r\n        \"coordinates\": [\r\n          [\r\n            -35.73268890380859,\r\n            -9.664299984034484\r\n          ],\r\n          [\r\n            -35.73075771331787,\r\n            -9.65998471367844\r\n          ],\r\n          [\r\n            -35.72947025299072,\r\n            -9.664130758788497\r\n          ],\r\n          [\r\n            -35.73032855987549,\r\n            -9.662353888567312\r\n          ],\r\n          [\r\n            -35.731701850891106,\r\n            -9.662353888567312\r\n          ]\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\n\r\nexport default sidewalks","import { Stroke, Style, Fill } from 'ol/style';\r\n\r\nconst green = new Style ({\r\n    fill: new Fill ({\r\n      color: 'rgba(0,255,0,1.0)'\r\n    }),\r\n    stroke: new Stroke ({\r\n      color: 'rgba(0,255,0,1.0)',\r\n      width: 3\r\n    })\r\n})\r\n  \r\n  \r\nconst red = new Style ({\r\n    fill: new Fill ({\r\n      color: 'rgba(255,0,0,1.0)'\r\n    }),\r\n    stroke: new Stroke ({\r\n      color: 'rgba(255,0,0,1.0)',\r\n      width: 3\r\n    })\r\n})\r\n  \r\nconst blue = new Style ({\r\n    fill: new Fill ({\r\n      color: 'rgba(0,0,255,1.0)'\r\n    }),\r\n    stroke: new Stroke ({\r\n      color: 'rgba(0,0,255,1.0)',\r\n      width: 3,\r\n      lineDash: [3, 7]\r\n    })\r\n})\r\n  \r\n \r\nfunction sidewalkStyles(feature) {\r\n   const color = feature.get('color');\r\n     switch (color) {\r\n        case 1:\r\n            return green;\r\n        case 2:\r\n            return red;\r\n        case 3:\r\n            return blue;\r\n        default:\r\n            return blue;\r\n    }\r\n}\r\n\r\nexport default sidewalkStyles","import React from 'react';\r\nimport './css/Mappage.css'\r\nimport 'ol/ol.css';\r\nimport {Map, View} from 'ol';\r\nimport OSM from 'ol/source/OSM';\r\nimport {GeoJSON} from 'ol/format';\r\nimport {Vector as VectorSource} from 'ol/source';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from 'ol/layer';\r\nimport sidewalks from './sidewalks.js';\r\nimport sidewalkStyles from './sidewalkstyles.js';\r\n\r\nconst vectorLayer = new VectorLayer({\r\n  source: new VectorSource({\r\n    features: new GeoJSON().readFeatures(sidewalks),\r\n  }),\r\n  style: sidewalkStyles\r\n})\r\n\r\n\r\nclass OpenLayersMap extends React.Component {\r\n  \r\n  render () {\r\n    return (\r\n      <div id=\"map\"> </div>\r\n    );\r\n  }\r\n  componentDidMount () {\r\n    const map = new Map({\r\n      target: 'map',\r\n      layers: [\r\n        new TileLayer({\r\n          source: new OSM()\r\n        }),\r\n        vectorLayer\r\n      ],\r\n      view: new View({\r\n        projection: 'EPSG:4326',\r\n        center: [-35.7, -9.66],\r\n        zoom: 13\r\n      })\r\n      \r\n    });\r\n  }\r\n}\r\n\r\nexport default OpenLayersMap","import React from 'react';\r\nimport './App.css';\r\nimport { Link } from 'react-router-dom';\r\nimport OpenLayersMap from './OpenLayersMap';\r\n\r\nfunction Mappage() {\r\n  return (\r\n    <div className=\"App\">\r\n      <OpenLayersMap></OpenLayersMap>\r\n      <Link to=\"/\">Ir para a p√°gina incial</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mappage;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport './css/hero.css'\nimport { Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './Mappage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"jumbotron text-left\" id=\"hero\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">Hello, world!</h1>\n          <p className=\"lead\">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>\n          <hr className=\"my-4\"></hr>\n          <p className=\"mb-4\">It uses utility classes for typography and spacing to space content out within the larger container.</p>\n          <Link to=\"/Mappage\" className=\"btn btn-success btn-lg mr-4\">Ir para o mapa</Link>\n          <Link to=\"/About\" className=\"btn btn-outline-success btn-lg\">Saiba Mais</Link>\n        </div>\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-3 mx-auto text-left\">\n            <h3 className=\"text-center mb-3\">Lorem Ipsum</h3>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, \n            sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \n            nisi ut aliquip ex ea commodo consequat.\n          </div>\n          <div className=\"col-3 mx-auto text-left\">\n            <h3 className=\"text-center mb-3\">Lorem Ipsum</h3>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, \n            sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \n            nisi ut aliquip ex ea commodo consequat.\n          </div>\n          <div className=\"col-3 mx-auto text-left\">\n            <h3 className=\"text- mb-3\">Lorem Ipsum</h3>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, \n            sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n            Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \n            nisi ut aliquip ex ea commodo consequat.\n          </div>\n        </div>\n      </div>\n\n      <Link to=\"/About\">Ir para a p√°gina sobre</Link>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport './App.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Link to=\"/\">Ir para a p√°gina incial</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport About from './About';\nimport Mappage from './Mappage'\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n       <BrowserRouter>\n        <Switch>\n            <Route path=\"/\" exact={true} component={App} />\n            <Route path=\"/About\" component={About} />\n            <Route path=\"/Mappage\" component={Mappage} />\n        </Switch>\n    </BrowserRouter>\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}